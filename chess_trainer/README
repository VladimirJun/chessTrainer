Model.py - экспорт партий с lichess.org и анализ этих партий с последующей записью в базу

Chess_data.csv - база проанализированных партий

chess-rating_model.pkl  - обученная модель
scaker.pkl - skaler


TrainModel.py - создание и обучение модели, предсказывающей рейтинг пользователя на основе силы сделанных им ходов.
Модель обучена с помощью XGBoost, т.к. принцип линейной регрессии плохо реагировал на партии-перфомансы(1000 рейтинга игра 95 процентов по первой линии, как пример)


Game.py - непосредственно игровая часть, где создается полноценная шахматная доска и по ходу партии вычисляется сила хода.
На основе процентного соотношения ходов по первой, второй, третьей линии и плохих ходов происходит оценка примерного рейтинга игрока.
На основе предсказанного рейтинга устанавливается уровень игры шахматного движка (Stockfish 16)
   process_user_move(move) - анализирует сделанный ход
   evaluate_game() - предсказывает примерный рейтинг на основе сделанных пользователем ходов.

 API/Server.py - файл для API со следующими функциями: - юзер: id, рейтинг (может быть 0, тогда надо рассчитывать с нуля), массив прошлых поединков в формате PGN (может быть пустой)
- создать новый матч, завершить матч (получив обновленный рейтинг)
- добавить ход к матчу, получить ответный ход и обновленный рейтинг

Добавлена логика игры за оба цвета и простой интерфейс для презентации

Запуск проекта:
1) Установка движка (stockfish 16)
2) Скачивание необходимых изображений шахматных фигур
3) Изменение путей к движку и изображениям в файле config.properties
4) Запуск файла Game.py



